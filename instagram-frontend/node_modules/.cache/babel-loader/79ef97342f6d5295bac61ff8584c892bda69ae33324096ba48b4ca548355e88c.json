{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\nfunction startSession(mechanisms) {\n  if (mechanisms.indexOf('SCRAM-SHA-256') === -1) {\n    throw new Error('SASL: Only mechanism SCRAM-SHA-256 is currently supported');\n  }\n  const clientNonce = crypto.randomBytes(18).toString('base64');\n  return {\n    mechanism: 'SCRAM-SHA-256',\n    clientNonce,\n    response: 'n,,n=*,r=' + clientNonce,\n    message: 'SASLInitialResponse'\n  };\n}\nfunction continueSession(session, password, serverData) {\n  if (session.message !== 'SASLInitialResponse') {\n    throw new Error('SASL: Last message was not SASLInitialResponse');\n  }\n  const sv = extractVariablesFromFirstServerMessage(serverData);\n  if (!sv.nonce.startsWith(session.clientNonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce');\n  }\n  var saltBytes = Buffer.from(sv.salt, 'base64');\n  var saltedPassword = Hi(password, saltBytes, sv.iteration);\n  var clientKey = createHMAC(saltedPassword, 'Client Key');\n  var storedKey = crypto.createHash('sha256').update(clientKey).digest();\n  var clientFirstMessageBare = 'n=*,r=' + session.clientNonce;\n  var serverFirstMessage = 'r=' + sv.nonce + ',s=' + sv.salt + ',i=' + sv.iteration;\n  var clientFinalMessageWithoutProof = 'c=biws,r=' + sv.nonce;\n  var authMessage = clientFirstMessageBare + ',' + serverFirstMessage + ',' + clientFinalMessageWithoutProof;\n  var clientSignature = createHMAC(storedKey, authMessage);\n  var clientProofBytes = xorBuffers(clientKey, clientSignature);\n  var clientProof = clientProofBytes.toString('base64');\n  var serverKey = createHMAC(saltedPassword, 'Server Key');\n  var serverSignatureBytes = createHMAC(serverKey, authMessage);\n  session.message = 'SASLResponse';\n  session.serverSignature = serverSignatureBytes.toString('base64');\n  session.response = clientFinalMessageWithoutProof + ',p=' + clientProof;\n}\nfunction finalizeSession(session, serverData) {\n  if (session.message !== 'SASLResponse') {\n    throw new Error('SASL: Last message was not SASLResponse');\n  }\n  var serverSignature;\n  String(serverData).split(',').forEach(function (part) {\n    switch (part[0]) {\n      case 'v':\n        serverSignature = part.substr(2);\n        break;\n    }\n  });\n  if (serverSignature !== session.serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match');\n  }\n}\nfunction extractVariablesFromFirstServerMessage(data) {\n  var nonce, salt, iteration;\n  String(data).split(',').forEach(function (part) {\n    switch (part[0]) {\n      case 'r':\n        nonce = part.substr(2);\n        break;\n      case 's':\n        salt = part.substr(2);\n        break;\n      case 'i':\n        iteration = parseInt(part.substr(2), 10);\n        break;\n    }\n  });\n  if (!nonce) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing');\n  }\n  if (!salt) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing');\n  }\n  if (!iteration) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing');\n  }\n  return {\n    nonce,\n    salt,\n    iteration\n  };\n}\nfunction xorBuffers(a, b) {\n  if (!Buffer.isBuffer(a)) a = Buffer.from(a);\n  if (!Buffer.isBuffer(b)) b = Buffer.from(b);\n  var res = [];\n  if (a.length > b.length) {\n    for (var i = 0; i < b.length; i++) {\n      res.push(a[i] ^ b[i]);\n    }\n  } else {\n    for (var j = 0; j < a.length; j++) {\n      res.push(a[j] ^ b[j]);\n    }\n  }\n  return Buffer.from(res);\n}\nfunction createHMAC(key, msg) {\n  return crypto.createHmac('sha256', key).update(msg).digest();\n}\nfunction Hi(password, saltBytes, iterations) {\n  var ui1 = createHMAC(password, Buffer.concat([saltBytes, Buffer.from([0, 0, 0, 1])]));\n  var ui = ui1;\n  for (var i = 0; i < iterations - 1; i++) {\n    ui1 = createHMAC(password, ui1);\n    ui = xorBuffers(ui, ui1);\n  }\n  return ui;\n}\nmodule.exports = {\n  startSession,\n  continueSession,\n  finalizeSession\n};","map":{"version":3,"names":["crypto","require","startSession","mechanisms","indexOf","Error","clientNonce","randomBytes","toString","mechanism","response","message","continueSession","session","password","serverData","sv","extractVariablesFromFirstServerMessage","nonce","startsWith","saltBytes","Buffer","from","salt","saltedPassword","Hi","iteration","clientKey","createHMAC","storedKey","createHash","update","digest","clientFirstMessageBare","serverFirstMessage","clientFinalMessageWithoutProof","authMessage","clientSignature","clientProofBytes","xorBuffers","clientProof","serverKey","serverSignatureBytes","serverSignature","finalizeSession","String","split","forEach","part","substr","data","parseInt","a","b","isBuffer","res","length","i","push","j","key","msg","createHmac","iterations","ui1","concat","ui","module","exports"],"sources":["C:/Users/Charles/Desktop/Projects/InstagramParody/instagram-frontend/node_modules/pg/lib/sasl.js"],"sourcesContent":["'use strict'\nconst crypto = require('crypto')\n\nfunction startSession(mechanisms) {\n  if (mechanisms.indexOf('SCRAM-SHA-256') === -1) {\n    throw new Error('SASL: Only mechanism SCRAM-SHA-256 is currently supported')\n  }\n\n  const clientNonce = crypto.randomBytes(18).toString('base64')\n\n  return {\n    mechanism: 'SCRAM-SHA-256',\n    clientNonce,\n    response: 'n,,n=*,r=' + clientNonce,\n    message: 'SASLInitialResponse',\n  }\n}\n\nfunction continueSession(session, password, serverData) {\n  if (session.message !== 'SASLInitialResponse') {\n    throw new Error('SASL: Last message was not SASLInitialResponse')\n  }\n\n  const sv = extractVariablesFromFirstServerMessage(serverData)\n\n  if (!sv.nonce.startsWith(session.clientNonce)) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: server nonce does not start with client nonce')\n  }\n\n  var saltBytes = Buffer.from(sv.salt, 'base64')\n\n  var saltedPassword = Hi(password, saltBytes, sv.iteration)\n\n  var clientKey = createHMAC(saltedPassword, 'Client Key')\n  var storedKey = crypto.createHash('sha256').update(clientKey).digest()\n\n  var clientFirstMessageBare = 'n=*,r=' + session.clientNonce\n  var serverFirstMessage = 'r=' + sv.nonce + ',s=' + sv.salt + ',i=' + sv.iteration\n\n  var clientFinalMessageWithoutProof = 'c=biws,r=' + sv.nonce\n\n  var authMessage = clientFirstMessageBare + ',' + serverFirstMessage + ',' + clientFinalMessageWithoutProof\n\n  var clientSignature = createHMAC(storedKey, authMessage)\n  var clientProofBytes = xorBuffers(clientKey, clientSignature)\n  var clientProof = clientProofBytes.toString('base64')\n\n  var serverKey = createHMAC(saltedPassword, 'Server Key')\n  var serverSignatureBytes = createHMAC(serverKey, authMessage)\n\n  session.message = 'SASLResponse'\n  session.serverSignature = serverSignatureBytes.toString('base64')\n  session.response = clientFinalMessageWithoutProof + ',p=' + clientProof\n}\n\nfunction finalizeSession(session, serverData) {\n  if (session.message !== 'SASLResponse') {\n    throw new Error('SASL: Last message was not SASLResponse')\n  }\n\n  var serverSignature\n\n  String(serverData)\n    .split(',')\n    .forEach(function (part) {\n      switch (part[0]) {\n        case 'v':\n          serverSignature = part.substr(2)\n          break\n      }\n    })\n\n  if (serverSignature !== session.serverSignature) {\n    throw new Error('SASL: SCRAM-SERVER-FINAL-MESSAGE: server signature does not match')\n  }\n}\n\nfunction extractVariablesFromFirstServerMessage(data) {\n  var nonce, salt, iteration\n\n  String(data)\n    .split(',')\n    .forEach(function (part) {\n      switch (part[0]) {\n        case 'r':\n          nonce = part.substr(2)\n          break\n        case 's':\n          salt = part.substr(2)\n          break\n        case 'i':\n          iteration = parseInt(part.substr(2), 10)\n          break\n      }\n    })\n\n  if (!nonce) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: nonce missing')\n  }\n\n  if (!salt) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: salt missing')\n  }\n\n  if (!iteration) {\n    throw new Error('SASL: SCRAM-SERVER-FIRST-MESSAGE: iteration missing')\n  }\n\n  return {\n    nonce,\n    salt,\n    iteration,\n  }\n}\n\nfunction xorBuffers(a, b) {\n  if (!Buffer.isBuffer(a)) a = Buffer.from(a)\n  if (!Buffer.isBuffer(b)) b = Buffer.from(b)\n  var res = []\n  if (a.length > b.length) {\n    for (var i = 0; i < b.length; i++) {\n      res.push(a[i] ^ b[i])\n    }\n  } else {\n    for (var j = 0; j < a.length; j++) {\n      res.push(a[j] ^ b[j])\n    }\n  }\n  return Buffer.from(res)\n}\n\nfunction createHMAC(key, msg) {\n  return crypto.createHmac('sha256', key).update(msg).digest()\n}\n\nfunction Hi(password, saltBytes, iterations) {\n  var ui1 = createHMAC(password, Buffer.concat([saltBytes, Buffer.from([0, 0, 0, 1])]))\n  var ui = ui1\n  for (var i = 0; i < iterations - 1; i++) {\n    ui1 = createHMAC(password, ui1)\n    ui = xorBuffers(ui, ui1)\n  }\n\n  return ui\n}\n\nmodule.exports = {\n  startSession,\n  continueSession,\n  finalizeSession,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}