{"ast":null,"code":"'use strict';\n\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\nvar dns = require('dns');\nvar defaults = require('./defaults');\nvar parse = require('pg-connection-string').parse; // parses a connection string\n\nvar val = function (key, config, envVar) {\n  if (envVar === undefined) {\n    envVar = process.env['PG' + key.toUpperCase()];\n  } else if (envVar === false) {\n    // do nothing ... use false\n  } else {\n    envVar = process.env[envVar];\n  }\n  return config[key] || envVar || defaults[key];\n};\nvar readSSLConfigFromEnvironment = function () {\n  switch (process.env.PGSSLMODE) {\n    case 'disable':\n      return false;\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      return true;\n    case 'no-verify':\n      return {\n        rejectUnauthorized: false\n      };\n  }\n  return defaults.ssl;\n};\nvar ConnectionParameters = function (config) {\n  // if a string is passed, it is a raw connection string so we parse it into a config\n  config = typeof config === 'string' ? parse(config) : config || {};\n\n  // if the config has a connectionString defined, parse IT into the config we use\n  // this will override other default values with what is stored in connectionString\n  if (config.connectionString) {\n    config = Object.assign({}, config, parse(config.connectionString));\n  }\n  this.user = val('user', config);\n  this.database = val('database', config);\n  if (this.database === undefined) {\n    this.database = this.user;\n  }\n  this.port = parseInt(val('port', config), 10);\n  this.host = val('host', config);\n\n  // \"hiding\" the password so it doesn't show up in stack traces\n  // or if the client is console.logged\n  Object.defineProperty(this, 'password', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: val('password', config)\n  });\n  this.binary = val('binary', config);\n  this.ssl = typeof config.ssl === 'undefined' ? readSSLConfigFromEnvironment() : config.ssl;\n\n  // support passing in ssl=no-verify via connection string\n  if (this.ssl === 'no-verify') {\n    this.ssl = {\n      rejectUnauthorized: false\n    };\n  }\n  this.client_encoding = val('client_encoding', config);\n  this.replication = val('replication', config);\n  // a domain socket begins with '/'\n  this.isDomainSocket = !(this.host || '').indexOf('/');\n  this.application_name = val('application_name', config, 'PGAPPNAME');\n  this.fallback_application_name = val('fallback_application_name', config, false);\n  this.statement_timeout = val('statement_timeout', config, false);\n  this.idle_in_transaction_session_timeout = val('idle_in_transaction_session_timeout', config, false);\n  this.query_timeout = val('query_timeout', config, false);\n  if (config.connectionTimeoutMillis === undefined) {\n    this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0;\n  } else {\n    this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000);\n  }\n  if (config.keepAlive === false) {\n    this.keepalives = 0;\n  } else if (config.keepAlive === true) {\n    this.keepalives = 1;\n  }\n  if (typeof config.keepAliveInitialDelayMillis === 'number') {\n    this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000);\n  }\n};\n\n// Convert arg to a string, surround in single quotes, and escape single quotes and backslashes\nvar quoteParamValue = function (value) {\n  return \"'\" + ('' + value).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\") + \"'\";\n};\nvar add = function (params, config, paramName) {\n  var value = config[paramName];\n  if (value !== undefined && value !== null) {\n    params.push(paramName + '=' + quoteParamValue(value));\n  }\n};\nConnectionParameters.prototype.getLibpqConnectionString = function (cb) {\n  var params = [];\n  add(params, this, 'user');\n  add(params, this, 'password');\n  add(params, this, 'port');\n  add(params, this, 'application_name');\n  add(params, this, 'fallback_application_name');\n  add(params, this, 'connect_timeout');\n  var ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? {\n    sslmode: this.ssl\n  } : {};\n  add(params, ssl, 'sslmode');\n  add(params, ssl, 'sslca');\n  add(params, ssl, 'sslkey');\n  add(params, ssl, 'sslcert');\n  add(params, ssl, 'sslrootcert');\n  if (this.database) {\n    params.push('dbname=' + quoteParamValue(this.database));\n  }\n  if (this.replication) {\n    params.push('replication=' + quoteParamValue(this.replication));\n  }\n  if (this.host) {\n    params.push('host=' + quoteParamValue(this.host));\n  }\n  if (this.isDomainSocket) {\n    return cb(null, params.join(' '));\n  }\n  if (this.client_encoding) {\n    params.push('client_encoding=' + quoteParamValue(this.client_encoding));\n  }\n  dns.lookup(this.host, function (err, address) {\n    if (err) return cb(err, null);\n    params.push('hostaddr=' + quoteParamValue(address));\n    return cb(null, params.join(' '));\n  });\n};\nmodule.exports = ConnectionParameters;","map":{"version":3,"names":["dns","require","defaults","parse","val","key","config","envVar","undefined","process","env","toUpperCase","readSSLConfigFromEnvironment","PGSSLMODE","rejectUnauthorized","ssl","ConnectionParameters","connectionString","Object","assign","user","database","port","parseInt","host","defineProperty","configurable","enumerable","writable","value","binary","client_encoding","replication","isDomainSocket","indexOf","application_name","fallback_application_name","statement_timeout","idle_in_transaction_session_timeout","query_timeout","connectionTimeoutMillis","connect_timeout","PGCONNECT_TIMEOUT","Math","floor","keepAlive","keepalives","keepAliveInitialDelayMillis","keepalives_idle","quoteParamValue","replace","add","params","paramName","push","prototype","getLibpqConnectionString","cb","sslmode","join","lookup","err","address","module","exports"],"sources":["C:/Users/Charles/Desktop/Projects/InstagramParody/instagram-frontend/node_modules/pg/lib/connection-parameters.js"],"sourcesContent":["'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar dns = require('dns')\n\nvar defaults = require('./defaults')\n\nvar parse = require('pg-connection-string').parse // parses a connection string\n\nvar val = function (key, config, envVar) {\n  if (envVar === undefined) {\n    envVar = process.env['PG' + key.toUpperCase()]\n  } else if (envVar === false) {\n    // do nothing ... use false\n  } else {\n    envVar = process.env[envVar]\n  }\n\n  return config[key] || envVar || defaults[key]\n}\n\nvar readSSLConfigFromEnvironment = function () {\n  switch (process.env.PGSSLMODE) {\n    case 'disable':\n      return false\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      return true\n    case 'no-verify':\n      return { rejectUnauthorized: false }\n  }\n  return defaults.ssl\n}\n\nvar ConnectionParameters = function (config) {\n  // if a string is passed, it is a raw connection string so we parse it into a config\n  config = typeof config === 'string' ? parse(config) : config || {}\n\n  // if the config has a connectionString defined, parse IT into the config we use\n  // this will override other default values with what is stored in connectionString\n  if (config.connectionString) {\n    config = Object.assign({}, config, parse(config.connectionString))\n  }\n\n  this.user = val('user', config)\n  this.database = val('database', config)\n\n  if (this.database === undefined) {\n    this.database = this.user\n  }\n\n  this.port = parseInt(val('port', config), 10)\n  this.host = val('host', config)\n\n  // \"hiding\" the password so it doesn't show up in stack traces\n  // or if the client is console.logged\n  Object.defineProperty(this, 'password', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: val('password', config),\n  })\n\n  this.binary = val('binary', config)\n\n  this.ssl = typeof config.ssl === 'undefined' ? readSSLConfigFromEnvironment() : config.ssl\n\n  // support passing in ssl=no-verify via connection string\n  if (this.ssl === 'no-verify') {\n    this.ssl = { rejectUnauthorized: false }\n  }\n\n  this.client_encoding = val('client_encoding', config)\n  this.replication = val('replication', config)\n  // a domain socket begins with '/'\n  this.isDomainSocket = !(this.host || '').indexOf('/')\n\n  this.application_name = val('application_name', config, 'PGAPPNAME')\n  this.fallback_application_name = val('fallback_application_name', config, false)\n  this.statement_timeout = val('statement_timeout', config, false)\n  this.idle_in_transaction_session_timeout = val('idle_in_transaction_session_timeout', config, false)\n  this.query_timeout = val('query_timeout', config, false)\n\n  if (config.connectionTimeoutMillis === undefined) {\n    this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0\n  } else {\n    this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000)\n  }\n\n  if (config.keepAlive === false) {\n    this.keepalives = 0\n  } else if (config.keepAlive === true) {\n    this.keepalives = 1\n  }\n\n  if (typeof config.keepAliveInitialDelayMillis === 'number') {\n    this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000)\n  }\n}\n\n// Convert arg to a string, surround in single quotes, and escape single quotes and backslashes\nvar quoteParamValue = function (value) {\n  return \"'\" + ('' + value).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\") + \"'\"\n}\n\nvar add = function (params, config, paramName) {\n  var value = config[paramName]\n  if (value !== undefined && value !== null) {\n    params.push(paramName + '=' + quoteParamValue(value))\n  }\n}\n\nConnectionParameters.prototype.getLibpqConnectionString = function (cb) {\n  var params = []\n  add(params, this, 'user')\n  add(params, this, 'password')\n  add(params, this, 'port')\n  add(params, this, 'application_name')\n  add(params, this, 'fallback_application_name')\n  add(params, this, 'connect_timeout')\n\n  var ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? { sslmode: this.ssl } : {}\n  add(params, ssl, 'sslmode')\n  add(params, ssl, 'sslca')\n  add(params, ssl, 'sslkey')\n  add(params, ssl, 'sslcert')\n  add(params, ssl, 'sslrootcert')\n\n  if (this.database) {\n    params.push('dbname=' + quoteParamValue(this.database))\n  }\n  if (this.replication) {\n    params.push('replication=' + quoteParamValue(this.replication))\n  }\n  if (this.host) {\n    params.push('host=' + quoteParamValue(this.host))\n  }\n  if (this.isDomainSocket) {\n    return cb(null, params.join(' '))\n  }\n  if (this.client_encoding) {\n    params.push('client_encoding=' + quoteParamValue(this.client_encoding))\n  }\n  dns.lookup(this.host, function (err, address) {\n    if (err) return cb(err, null)\n    params.push('hostaddr=' + quoteParamValue(address))\n    return cb(null, params.join(' '))\n  })\n}\n\nmodule.exports = ConnectionParameters\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}