{"ast":null,"code":"'use strict';\n\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar utils = require('./utils');\nvar sasl = require('./sasl');\nvar pgPass = require('pgpass');\nvar TypeOverrides = require('./type-overrides');\nvar ConnectionParameters = require('./connection-parameters');\nvar Query = require('./query');\nvar defaults = require('./defaults');\nvar Connection = require('./connection');\nvar Client = function (config) {\n  EventEmitter.call(this);\n  this.connectionParameters = new ConnectionParameters(config);\n  this.user = this.connectionParameters.user;\n  this.database = this.connectionParameters.database;\n  this.port = this.connectionParameters.port;\n  this.host = this.connectionParameters.host;\n\n  // \"hiding\" the password so it doesn't show up in stack traces\n  // or if the client is console.logged\n  Object.defineProperty(this, 'password', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: this.connectionParameters.password\n  });\n  this.replication = this.connectionParameters.replication;\n  var c = config || {};\n  this._Promise = c.Promise || global.Promise;\n  this._types = new TypeOverrides(c.types);\n  this._ending = false;\n  this._connecting = false;\n  this._connected = false;\n  this._connectionError = false;\n  this._queryable = true;\n  this.connection = c.connection || new Connection({\n    stream: c.stream,\n    ssl: this.connectionParameters.ssl,\n    keepAlive: c.keepAlive || false,\n    keepAliveInitialDelayMillis: c.keepAliveInitialDelayMillis || 0,\n    encoding: this.connectionParameters.client_encoding || 'utf8'\n  });\n  this.queryQueue = [];\n  this.binary = c.binary || defaults.binary;\n  this.processID = null;\n  this.secretKey = null;\n  this.ssl = this.connectionParameters.ssl || false;\n  this._connectionTimeoutMillis = c.connectionTimeoutMillis || 0;\n};\nutil.inherits(Client, EventEmitter);\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = query => {\n    process.nextTick(() => {\n      query.handleError(err, this.connection);\n    });\n  };\n  if (this.activeQuery) {\n    enqueueError(this.activeQuery);\n    this.activeQuery = null;\n  }\n  this.queryQueue.forEach(enqueueError);\n  this.queryQueue.length = 0;\n};\nClient.prototype._connect = function (callback) {\n  var self = this;\n  var con = this.connection;\n  if (this._connecting || this._connected) {\n    const err = new Error('Client has already been connected. You cannot reuse a client.');\n    process.nextTick(() => {\n      callback(err);\n    });\n    return;\n  }\n  this._connecting = true;\n  var connectionTimeoutHandle;\n  if (this._connectionTimeoutMillis > 0) {\n    connectionTimeoutHandle = setTimeout(() => {\n      con._ending = true;\n      con.stream.destroy(new Error('timeout expired'));\n    }, this._connectionTimeoutMillis);\n  }\n  if (this.host && this.host.indexOf('/') === 0) {\n    con.connect(this.host + '/.s.PGSQL.' + this.port);\n  } else {\n    con.connect(this.port, this.host);\n  }\n\n  // once connection is established send startup message\n  con.on('connect', function () {\n    if (self.ssl) {\n      con.requestSsl();\n    } else {\n      con.startup(self.getStartupConf());\n    }\n  });\n  con.on('sslconnect', function () {\n    con.startup(self.getStartupConf());\n  });\n  function checkPgPass(cb) {\n    return function (msg) {\n      if (typeof self.password === 'function') {\n        self._Promise.resolve().then(() => self.password()).then(pass => {\n          if (pass !== undefined) {\n            if (typeof pass !== 'string') {\n              con.emit('error', new TypeError('Password must be a string'));\n              return;\n            }\n            self.connectionParameters.password = self.password = pass;\n          } else {\n            self.connectionParameters.password = self.password = null;\n          }\n          cb(msg);\n        }).catch(err => {\n          con.emit('error', err);\n        });\n      } else if (self.password !== null) {\n        cb(msg);\n      } else {\n        pgPass(self.connectionParameters, function (pass) {\n          if (undefined !== pass) {\n            self.connectionParameters.password = self.password = pass;\n          }\n          cb(msg);\n        });\n      }\n    };\n  }\n\n  // password request handling\n  con.on('authenticationCleartextPassword', checkPgPass(function () {\n    con.password(self.password);\n  }));\n\n  // password request handling\n  con.on('authenticationMD5Password', checkPgPass(function (msg) {\n    con.password(utils.postgresMd5PasswordHash(self.user, self.password, msg.salt));\n  }));\n\n  // password request handling (SASL)\n  var saslSession;\n  con.on('authenticationSASL', checkPgPass(function (msg) {\n    saslSession = sasl.startSession(msg.mechanisms);\n    con.sendSASLInitialResponseMessage(saslSession.mechanism, saslSession.response);\n  }));\n\n  // password request handling (SASL)\n  con.on('authenticationSASLContinue', function (msg) {\n    sasl.continueSession(saslSession, self.password, msg.data);\n    con.sendSCRAMClientFinalMessage(saslSession.response);\n  });\n\n  // password request handling (SASL)\n  con.on('authenticationSASLFinal', function (msg) {\n    sasl.finalizeSession(saslSession, msg.data);\n    saslSession = null;\n  });\n  con.once('backendKeyData', function (msg) {\n    self.processID = msg.processID;\n    self.secretKey = msg.secretKey;\n  });\n  const connectingErrorHandler = err => {\n    if (this._connectionError) {\n      return;\n    }\n    this._connectionError = true;\n    clearTimeout(connectionTimeoutHandle);\n    if (callback) {\n      return callback(err);\n    }\n    this.emit('error', err);\n  };\n  const connectedErrorHandler = err => {\n    this._queryable = false;\n    this._errorAllQueries(err);\n    this.emit('error', err);\n  };\n  const connectedErrorMessageHandler = msg => {\n    const activeQuery = this.activeQuery;\n    if (!activeQuery) {\n      connectedErrorHandler(msg);\n      return;\n    }\n    this.activeQuery = null;\n    activeQuery.handleError(msg, con);\n  };\n  con.on('error', connectingErrorHandler);\n  con.on('errorMessage', connectingErrorHandler);\n\n  // hook up query handling events to connection\n  // after the connection initially becomes ready for queries\n  con.once('readyForQuery', function () {\n    self._connecting = false;\n    self._connected = true;\n    self._attachListeners(con);\n    con.removeListener('error', connectingErrorHandler);\n    con.removeListener('errorMessage', connectingErrorHandler);\n    con.on('error', connectedErrorHandler);\n    con.on('errorMessage', connectedErrorMessageHandler);\n    clearTimeout(connectionTimeoutHandle);\n\n    // process possible callback argument to Client#connect\n    if (callback) {\n      callback(null, self);\n      // remove callback for proper error handling\n      // after the connect event\n      callback = null;\n    }\n    self.emit('connect');\n  });\n  con.on('readyForQuery', function () {\n    var activeQuery = self.activeQuery;\n    self.activeQuery = null;\n    self.readyForQuery = true;\n    if (activeQuery) {\n      activeQuery.handleReadyForQuery(con);\n    }\n    self._pulseQueryQueue();\n  });\n  con.once('end', () => {\n    const error = this._ending ? new Error('Connection terminated') : new Error('Connection terminated unexpectedly');\n    clearTimeout(connectionTimeoutHandle);\n    this._errorAllQueries(error);\n    if (!this._ending) {\n      // if the connection is ended without us calling .end()\n      // on this client then we have an unexpected disconnection\n      // treat this as an error unless we've already emitted an error\n      // during connection.\n      if (this._connecting && !this._connectionError) {\n        if (callback) {\n          callback(error);\n        } else {\n          connectedErrorHandler(error);\n        }\n      } else if (!this._connectionError) {\n        connectedErrorHandler(error);\n      }\n    }\n    process.nextTick(() => {\n      this.emit('end');\n    });\n  });\n  con.on('notice', function (msg) {\n    self.emit('notice', msg);\n  });\n};\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback);\n    return;\n  }\n  return new this._Promise((resolve, reject) => {\n    this._connect(error => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\nClient.prototype._attachListeners = function (con) {\n  const self = this;\n  // delegate rowDescription to active query\n  con.on('rowDescription', function (msg) {\n    self.activeQuery.handleRowDescription(msg);\n  });\n\n  // delegate dataRow to active query\n  con.on('dataRow', function (msg) {\n    self.activeQuery.handleDataRow(msg);\n  });\n\n  // delegate portalSuspended to active query\n  // eslint-disable-next-line no-unused-vars\n  con.on('portalSuspended', function (msg) {\n    self.activeQuery.handlePortalSuspended(con);\n  });\n\n  // delegate emptyQuery to active query\n  // eslint-disable-next-line no-unused-vars\n  con.on('emptyQuery', function (msg) {\n    self.activeQuery.handleEmptyQuery(con);\n  });\n\n  // delegate commandComplete to active query\n  con.on('commandComplete', function (msg) {\n    self.activeQuery.handleCommandComplete(msg, con);\n  });\n\n  // if a prepared statement has a name and properly parses\n  // we track that its already been executed so we don't parse\n  // it again on the same client\n  // eslint-disable-next-line no-unused-vars\n  con.on('parseComplete', function (msg) {\n    if (self.activeQuery.name) {\n      con.parsedStatements[self.activeQuery.name] = self.activeQuery.text;\n    }\n  });\n\n  // eslint-disable-next-line no-unused-vars\n  con.on('copyInResponse', function (msg) {\n    self.activeQuery.handleCopyInResponse(self.connection);\n  });\n  con.on('copyData', function (msg) {\n    self.activeQuery.handleCopyData(msg, self.connection);\n  });\n  con.on('notification', function (msg) {\n    self.emit('notification', msg);\n  });\n};\nClient.prototype.getStartupConf = function () {\n  var params = this.connectionParameters;\n  var data = {\n    user: params.user,\n    database: params.database\n  };\n  var appName = params.application_name || params.fallback_application_name;\n  if (appName) {\n    data.application_name = appName;\n  }\n  if (params.replication) {\n    data.replication = '' + params.replication;\n  }\n  if (params.statement_timeout) {\n    data.statement_timeout = String(parseInt(params.statement_timeout, 10));\n  }\n  if (params.idle_in_transaction_session_timeout) {\n    data.idle_in_transaction_session_timeout = String(parseInt(params.idle_in_transaction_session_timeout, 10));\n  }\n  return data;\n};\nClient.prototype.cancel = function (client, query) {\n  if (client.activeQuery === query) {\n    var con = this.connection;\n    if (this.host && this.host.indexOf('/') === 0) {\n      con.connect(this.host + '/.s.PGSQL.' + this.port);\n    } else {\n      con.connect(this.port, this.host);\n    }\n\n    // once connection is established send cancel message\n    con.on('connect', function () {\n      con.cancel(client.processID, client.secretKey);\n    });\n  } else if (client.queryQueue.indexOf(query) !== -1) {\n    client.queryQueue.splice(client.queryQueue.indexOf(query), 1);\n  }\n};\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn);\n};\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format);\n};\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nClient.prototype.escapeIdentifier = function (str) {\n  return '\"' + str.replace(/\"/g, '\"\"') + '\"';\n};\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nClient.prototype.escapeLiteral = function (str) {\n  var hasBackslash = false;\n  var escaped = \"'\";\n  for (var i = 0; i < str.length; i++) {\n    var c = str[i];\n    if (c === \"'\") {\n      escaped += c + c;\n    } else if (c === '\\\\') {\n      escaped += c + c;\n      hasBackslash = true;\n    } else {\n      escaped += c;\n    }\n  }\n  escaped += \"'\";\n  if (hasBackslash === true) {\n    escaped = ' E' + escaped;\n  }\n  return escaped;\n};\nClient.prototype._pulseQueryQueue = function () {\n  if (this.readyForQuery === true) {\n    this.activeQuery = this.queryQueue.shift();\n    if (this.activeQuery) {\n      this.readyForQuery = false;\n      this.hasExecuted = true;\n      const queryError = this.activeQuery.submit(this.connection);\n      if (queryError) {\n        process.nextTick(() => {\n          this.activeQuery.handleError(queryError, this.connection);\n          this.readyForQuery = true;\n          this._pulseQueryQueue();\n        });\n      }\n    } else if (this.hasExecuted) {\n      this.activeQuery = null;\n      this.emit('drain');\n    }\n  }\n};\nClient.prototype.query = function (config, values, callback) {\n  // can take in strings, config object or query object\n  var query;\n  var result;\n  var readTimeout;\n  var readTimeoutTimer;\n  var queryCallback;\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query');\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout;\n    result = query = config;\n    if (typeof values === 'function') {\n      query.callback = query.callback || values;\n    }\n  } else {\n    readTimeout = this.connectionParameters.query_timeout;\n    query = new Query(config, values, callback);\n    if (!query.callback) {\n      result = new this._Promise((resolve, reject) => {\n        query.callback = (err, res) => err ? reject(err) : resolve(res);\n      });\n    }\n  }\n  if (readTimeout) {\n    queryCallback = query.callback;\n    readTimeoutTimer = setTimeout(() => {\n      var error = new Error('Query read timeout');\n      process.nextTick(() => {\n        query.handleError(error, this.connection);\n      });\n      queryCallback(error);\n\n      // we already returned an error,\n      // just do nothing if query completes\n      query.callback = () => {};\n\n      // Remove from queue\n      var index = this.queryQueue.indexOf(query);\n      if (index > -1) {\n        this.queryQueue.splice(index, 1);\n      }\n      this._pulseQueryQueue();\n    }, readTimeout);\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer);\n      queryCallback(err, res);\n    };\n  }\n  if (this.binary && !query.binary) {\n    query.binary = true;\n  }\n  if (query._result && !query._result._types) {\n    query._result._types = this._types;\n  }\n  if (!this._queryable) {\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'), this.connection);\n    });\n    return result;\n  }\n  if (this._ending) {\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'), this.connection);\n    });\n    return result;\n  }\n  this.queryQueue.push(query);\n  this._pulseQueryQueue();\n  return result;\n};\nClient.prototype.end = function (cb) {\n  this._ending = true;\n\n  // if we have never connected, then end is a noop, callback immediately\n  if (!this.connection._connecting) {\n    if (cb) {\n      cb();\n    } else {\n      return this._Promise.resolve();\n    }\n  }\n  if (this.activeQuery || !this._queryable) {\n    // if we have an active query we need to force a disconnect\n    // on the socket - otherwise a hung query could block end forever\n    this.connection.stream.destroy();\n  } else {\n    this.connection.end();\n  }\n  if (cb) {\n    this.connection.once('end', cb);\n  } else {\n    return new this._Promise(resolve => {\n      this.connection.once('end', resolve);\n    });\n  }\n};\n\n// expose a Query constructor\nClient.Query = Query;\nmodule.exports = Client;","map":{"version":3,"names":["EventEmitter","require","util","utils","sasl","pgPass","TypeOverrides","ConnectionParameters","Query","defaults","Connection","Client","config","call","connectionParameters","user","database","port","host","Object","defineProperty","configurable","enumerable","writable","value","password","replication","c","_Promise","Promise","global","_types","types","_ending","_connecting","_connected","_connectionError","_queryable","connection","stream","ssl","keepAlive","keepAliveInitialDelayMillis","encoding","client_encoding","queryQueue","binary","processID","secretKey","_connectionTimeoutMillis","connectionTimeoutMillis","inherits","prototype","_errorAllQueries","err","enqueueError","query","process","nextTick","handleError","activeQuery","forEach","length","_connect","callback","self","con","Error","connectionTimeoutHandle","setTimeout","destroy","indexOf","connect","on","requestSsl","startup","getStartupConf","checkPgPass","cb","msg","resolve","then","pass","undefined","emit","TypeError","catch","postgresMd5PasswordHash","salt","saslSession","startSession","mechanisms","sendSASLInitialResponseMessage","mechanism","response","continueSession","data","sendSCRAMClientFinalMessage","finalizeSession","once","connectingErrorHandler","clearTimeout","connectedErrorHandler","connectedErrorMessageHandler","_attachListeners","removeListener","readyForQuery","handleReadyForQuery","_pulseQueryQueue","error","reject","handleRowDescription","handleDataRow","handlePortalSuspended","handleEmptyQuery","handleCommandComplete","name","parsedStatements","text","handleCopyInResponse","handleCopyData","params","appName","application_name","fallback_application_name","statement_timeout","String","parseInt","idle_in_transaction_session_timeout","cancel","client","splice","setTypeParser","oid","format","parseFn","getTypeParser","escapeIdentifier","str","replace","escapeLiteral","hasBackslash","escaped","i","shift","hasExecuted","queryError","submit","values","result","readTimeout","readTimeoutTimer","queryCallback","query_timeout","res","index","_result","push","end","module","exports"],"sources":["C:/Users/Charles/Desktop/Projects/InstagramParody/instagram-frontend/node_modules/pg/lib/client.js"],"sourcesContent":["'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar EventEmitter = require('events').EventEmitter\nvar util = require('util')\nvar utils = require('./utils')\nvar sasl = require('./sasl')\nvar pgPass = require('pgpass')\nvar TypeOverrides = require('./type-overrides')\n\nvar ConnectionParameters = require('./connection-parameters')\nvar Query = require('./query')\nvar defaults = require('./defaults')\nvar Connection = require('./connection')\n\nvar Client = function (config) {\n  EventEmitter.call(this)\n\n  this.connectionParameters = new ConnectionParameters(config)\n  this.user = this.connectionParameters.user\n  this.database = this.connectionParameters.database\n  this.port = this.connectionParameters.port\n  this.host = this.connectionParameters.host\n\n  // \"hiding\" the password so it doesn't show up in stack traces\n  // or if the client is console.logged\n  Object.defineProperty(this, 'password', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value: this.connectionParameters.password,\n  })\n\n  this.replication = this.connectionParameters.replication\n\n  var c = config || {}\n\n  this._Promise = c.Promise || global.Promise\n  this._types = new TypeOverrides(c.types)\n  this._ending = false\n  this._connecting = false\n  this._connected = false\n  this._connectionError = false\n  this._queryable = true\n\n  this.connection =\n    c.connection ||\n    new Connection({\n      stream: c.stream,\n      ssl: this.connectionParameters.ssl,\n      keepAlive: c.keepAlive || false,\n      keepAliveInitialDelayMillis: c.keepAliveInitialDelayMillis || 0,\n      encoding: this.connectionParameters.client_encoding || 'utf8',\n    })\n  this.queryQueue = []\n  this.binary = c.binary || defaults.binary\n  this.processID = null\n  this.secretKey = null\n  this.ssl = this.connectionParameters.ssl || false\n  this._connectionTimeoutMillis = c.connectionTimeoutMillis || 0\n}\n\nutil.inherits(Client, EventEmitter)\n\nClient.prototype._errorAllQueries = function (err) {\n  const enqueueError = (query) => {\n    process.nextTick(() => {\n      query.handleError(err, this.connection)\n    })\n  }\n\n  if (this.activeQuery) {\n    enqueueError(this.activeQuery)\n    this.activeQuery = null\n  }\n\n  this.queryQueue.forEach(enqueueError)\n  this.queryQueue.length = 0\n}\n\nClient.prototype._connect = function (callback) {\n  var self = this\n  var con = this.connection\n  if (this._connecting || this._connected) {\n    const err = new Error('Client has already been connected. You cannot reuse a client.')\n    process.nextTick(() => {\n      callback(err)\n    })\n    return\n  }\n  this._connecting = true\n\n  var connectionTimeoutHandle\n  if (this._connectionTimeoutMillis > 0) {\n    connectionTimeoutHandle = setTimeout(() => {\n      con._ending = true\n      con.stream.destroy(new Error('timeout expired'))\n    }, this._connectionTimeoutMillis)\n  }\n\n  if (this.host && this.host.indexOf('/') === 0) {\n    con.connect(this.host + '/.s.PGSQL.' + this.port)\n  } else {\n    con.connect(this.port, this.host)\n  }\n\n  // once connection is established send startup message\n  con.on('connect', function () {\n    if (self.ssl) {\n      con.requestSsl()\n    } else {\n      con.startup(self.getStartupConf())\n    }\n  })\n\n  con.on('sslconnect', function () {\n    con.startup(self.getStartupConf())\n  })\n\n  function checkPgPass(cb) {\n    return function (msg) {\n      if (typeof self.password === 'function') {\n        self._Promise\n          .resolve()\n          .then(() => self.password())\n          .then((pass) => {\n            if (pass !== undefined) {\n              if (typeof pass !== 'string') {\n                con.emit('error', new TypeError('Password must be a string'))\n                return\n              }\n              self.connectionParameters.password = self.password = pass\n            } else {\n              self.connectionParameters.password = self.password = null\n            }\n            cb(msg)\n          })\n          .catch((err) => {\n            con.emit('error', err)\n          })\n      } else if (self.password !== null) {\n        cb(msg)\n      } else {\n        pgPass(self.connectionParameters, function (pass) {\n          if (undefined !== pass) {\n            self.connectionParameters.password = self.password = pass\n          }\n          cb(msg)\n        })\n      }\n    }\n  }\n\n  // password request handling\n  con.on(\n    'authenticationCleartextPassword',\n    checkPgPass(function () {\n      con.password(self.password)\n    })\n  )\n\n  // password request handling\n  con.on(\n    'authenticationMD5Password',\n    checkPgPass(function (msg) {\n      con.password(utils.postgresMd5PasswordHash(self.user, self.password, msg.salt))\n    })\n  )\n\n  // password request handling (SASL)\n  var saslSession\n  con.on(\n    'authenticationSASL',\n    checkPgPass(function (msg) {\n      saslSession = sasl.startSession(msg.mechanisms)\n\n      con.sendSASLInitialResponseMessage(saslSession.mechanism, saslSession.response)\n    })\n  )\n\n  // password request handling (SASL)\n  con.on('authenticationSASLContinue', function (msg) {\n    sasl.continueSession(saslSession, self.password, msg.data)\n\n    con.sendSCRAMClientFinalMessage(saslSession.response)\n  })\n\n  // password request handling (SASL)\n  con.on('authenticationSASLFinal', function (msg) {\n    sasl.finalizeSession(saslSession, msg.data)\n\n    saslSession = null\n  })\n\n  con.once('backendKeyData', function (msg) {\n    self.processID = msg.processID\n    self.secretKey = msg.secretKey\n  })\n\n  const connectingErrorHandler = (err) => {\n    if (this._connectionError) {\n      return\n    }\n    this._connectionError = true\n    clearTimeout(connectionTimeoutHandle)\n    if (callback) {\n      return callback(err)\n    }\n    this.emit('error', err)\n  }\n\n  const connectedErrorHandler = (err) => {\n    this._queryable = false\n    this._errorAllQueries(err)\n    this.emit('error', err)\n  }\n\n  const connectedErrorMessageHandler = (msg) => {\n    const activeQuery = this.activeQuery\n\n    if (!activeQuery) {\n      connectedErrorHandler(msg)\n      return\n    }\n\n    this.activeQuery = null\n    activeQuery.handleError(msg, con)\n  }\n\n  con.on('error', connectingErrorHandler)\n  con.on('errorMessage', connectingErrorHandler)\n\n  // hook up query handling events to connection\n  // after the connection initially becomes ready for queries\n  con.once('readyForQuery', function () {\n    self._connecting = false\n    self._connected = true\n    self._attachListeners(con)\n    con.removeListener('error', connectingErrorHandler)\n    con.removeListener('errorMessage', connectingErrorHandler)\n    con.on('error', connectedErrorHandler)\n    con.on('errorMessage', connectedErrorMessageHandler)\n    clearTimeout(connectionTimeoutHandle)\n\n    // process possible callback argument to Client#connect\n    if (callback) {\n      callback(null, self)\n      // remove callback for proper error handling\n      // after the connect event\n      callback = null\n    }\n    self.emit('connect')\n  })\n\n  con.on('readyForQuery', function () {\n    var activeQuery = self.activeQuery\n    self.activeQuery = null\n    self.readyForQuery = true\n    if (activeQuery) {\n      activeQuery.handleReadyForQuery(con)\n    }\n    self._pulseQueryQueue()\n  })\n\n  con.once('end', () => {\n    const error = this._ending ? new Error('Connection terminated') : new Error('Connection terminated unexpectedly')\n\n    clearTimeout(connectionTimeoutHandle)\n    this._errorAllQueries(error)\n\n    if (!this._ending) {\n      // if the connection is ended without us calling .end()\n      // on this client then we have an unexpected disconnection\n      // treat this as an error unless we've already emitted an error\n      // during connection.\n      if (this._connecting && !this._connectionError) {\n        if (callback) {\n          callback(error)\n        } else {\n          connectedErrorHandler(error)\n        }\n      } else if (!this._connectionError) {\n        connectedErrorHandler(error)\n      }\n    }\n\n    process.nextTick(() => {\n      this.emit('end')\n    })\n  })\n\n  con.on('notice', function (msg) {\n    self.emit('notice', msg)\n  })\n}\n\nClient.prototype.connect = function (callback) {\n  if (callback) {\n    this._connect(callback)\n    return\n  }\n\n  return new this._Promise((resolve, reject) => {\n    this._connect((error) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\n\nClient.prototype._attachListeners = function (con) {\n  const self = this\n  // delegate rowDescription to active query\n  con.on('rowDescription', function (msg) {\n    self.activeQuery.handleRowDescription(msg)\n  })\n\n  // delegate dataRow to active query\n  con.on('dataRow', function (msg) {\n    self.activeQuery.handleDataRow(msg)\n  })\n\n  // delegate portalSuspended to active query\n  // eslint-disable-next-line no-unused-vars\n  con.on('portalSuspended', function (msg) {\n    self.activeQuery.handlePortalSuspended(con)\n  })\n\n  // delegate emptyQuery to active query\n  // eslint-disable-next-line no-unused-vars\n  con.on('emptyQuery', function (msg) {\n    self.activeQuery.handleEmptyQuery(con)\n  })\n\n  // delegate commandComplete to active query\n  con.on('commandComplete', function (msg) {\n    self.activeQuery.handleCommandComplete(msg, con)\n  })\n\n  // if a prepared statement has a name and properly parses\n  // we track that its already been executed so we don't parse\n  // it again on the same client\n  // eslint-disable-next-line no-unused-vars\n  con.on('parseComplete', function (msg) {\n    if (self.activeQuery.name) {\n      con.parsedStatements[self.activeQuery.name] = self.activeQuery.text\n    }\n  })\n\n  // eslint-disable-next-line no-unused-vars\n  con.on('copyInResponse', function (msg) {\n    self.activeQuery.handleCopyInResponse(self.connection)\n  })\n\n  con.on('copyData', function (msg) {\n    self.activeQuery.handleCopyData(msg, self.connection)\n  })\n\n  con.on('notification', function (msg) {\n    self.emit('notification', msg)\n  })\n}\n\nClient.prototype.getStartupConf = function () {\n  var params = this.connectionParameters\n\n  var data = {\n    user: params.user,\n    database: params.database,\n  }\n\n  var appName = params.application_name || params.fallback_application_name\n  if (appName) {\n    data.application_name = appName\n  }\n  if (params.replication) {\n    data.replication = '' + params.replication\n  }\n  if (params.statement_timeout) {\n    data.statement_timeout = String(parseInt(params.statement_timeout, 10))\n  }\n  if (params.idle_in_transaction_session_timeout) {\n    data.idle_in_transaction_session_timeout = String(parseInt(params.idle_in_transaction_session_timeout, 10))\n  }\n\n  return data\n}\n\nClient.prototype.cancel = function (client, query) {\n  if (client.activeQuery === query) {\n    var con = this.connection\n\n    if (this.host && this.host.indexOf('/') === 0) {\n      con.connect(this.host + '/.s.PGSQL.' + this.port)\n    } else {\n      con.connect(this.port, this.host)\n    }\n\n    // once connection is established send cancel message\n    con.on('connect', function () {\n      con.cancel(client.processID, client.secretKey)\n    })\n  } else if (client.queryQueue.indexOf(query) !== -1) {\n    client.queryQueue.splice(client.queryQueue.indexOf(query), 1)\n  }\n}\n\nClient.prototype.setTypeParser = function (oid, format, parseFn) {\n  return this._types.setTypeParser(oid, format, parseFn)\n}\n\nClient.prototype.getTypeParser = function (oid, format) {\n  return this._types.getTypeParser(oid, format)\n}\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nClient.prototype.escapeIdentifier = function (str) {\n  return '\"' + str.replace(/\"/g, '\"\"') + '\"'\n}\n\n// Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\nClient.prototype.escapeLiteral = function (str) {\n  var hasBackslash = false\n  var escaped = \"'\"\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str[i]\n    if (c === \"'\") {\n      escaped += c + c\n    } else if (c === '\\\\') {\n      escaped += c + c\n      hasBackslash = true\n    } else {\n      escaped += c\n    }\n  }\n\n  escaped += \"'\"\n\n  if (hasBackslash === true) {\n    escaped = ' E' + escaped\n  }\n\n  return escaped\n}\n\nClient.prototype._pulseQueryQueue = function () {\n  if (this.readyForQuery === true) {\n    this.activeQuery = this.queryQueue.shift()\n    if (this.activeQuery) {\n      this.readyForQuery = false\n      this.hasExecuted = true\n\n      const queryError = this.activeQuery.submit(this.connection)\n      if (queryError) {\n        process.nextTick(() => {\n          this.activeQuery.handleError(queryError, this.connection)\n          this.readyForQuery = true\n          this._pulseQueryQueue()\n        })\n      }\n    } else if (this.hasExecuted) {\n      this.activeQuery = null\n      this.emit('drain')\n    }\n  }\n}\n\nClient.prototype.query = function (config, values, callback) {\n  // can take in strings, config object or query object\n  var query\n  var result\n  var readTimeout\n  var readTimeoutTimer\n  var queryCallback\n\n  if (config === null || config === undefined) {\n    throw new TypeError('Client was passed a null or undefined query')\n  } else if (typeof config.submit === 'function') {\n    readTimeout = config.query_timeout || this.connectionParameters.query_timeout\n    result = query = config\n    if (typeof values === 'function') {\n      query.callback = query.callback || values\n    }\n  } else {\n    readTimeout = this.connectionParameters.query_timeout\n    query = new Query(config, values, callback)\n    if (!query.callback) {\n      result = new this._Promise((resolve, reject) => {\n        query.callback = (err, res) => (err ? reject(err) : resolve(res))\n      })\n    }\n  }\n\n  if (readTimeout) {\n    queryCallback = query.callback\n\n    readTimeoutTimer = setTimeout(() => {\n      var error = new Error('Query read timeout')\n\n      process.nextTick(() => {\n        query.handleError(error, this.connection)\n      })\n\n      queryCallback(error)\n\n      // we already returned an error,\n      // just do nothing if query completes\n      query.callback = () => {}\n\n      // Remove from queue\n      var index = this.queryQueue.indexOf(query)\n      if (index > -1) {\n        this.queryQueue.splice(index, 1)\n      }\n\n      this._pulseQueryQueue()\n    }, readTimeout)\n\n    query.callback = (err, res) => {\n      clearTimeout(readTimeoutTimer)\n      queryCallback(err, res)\n    }\n  }\n\n  if (this.binary && !query.binary) {\n    query.binary = true\n  }\n\n  if (query._result && !query._result._types) {\n    query._result._types = this._types\n  }\n\n  if (!this._queryable) {\n    process.nextTick(() => {\n      query.handleError(new Error('Client has encountered a connection error and is not queryable'), this.connection)\n    })\n    return result\n  }\n\n  if (this._ending) {\n    process.nextTick(() => {\n      query.handleError(new Error('Client was closed and is not queryable'), this.connection)\n    })\n    return result\n  }\n\n  this.queryQueue.push(query)\n  this._pulseQueryQueue()\n  return result\n}\n\nClient.prototype.end = function (cb) {\n  this._ending = true\n\n  // if we have never connected, then end is a noop, callback immediately\n  if (!this.connection._connecting) {\n    if (cb) {\n      cb()\n    } else {\n      return this._Promise.resolve()\n    }\n  }\n\n  if (this.activeQuery || !this._queryable) {\n    // if we have an active query we need to force a disconnect\n    // on the socket - otherwise a hung query could block end forever\n    this.connection.stream.destroy()\n  } else {\n    this.connection.end()\n  }\n\n  if (cb) {\n    this.connection.once('end', cb)\n  } else {\n    return new this._Promise((resolve) => {\n      this.connection.once('end', resolve)\n    })\n  }\n}\n\n// expose a Query constructor\nClient.Query = Query\n\nmodule.exports = Client\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}