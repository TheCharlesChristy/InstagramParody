{"ast":null,"code":"'use strict';\n\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\nvar types = require('pg-types');\n\n// result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\nvar Result = function (rowMode, types) {\n  this.command = null;\n  this.rowCount = null;\n  this.oid = null;\n  this.rows = [];\n  this.fields = [];\n  this._parsers = undefined;\n  this._types = types;\n  this.RowCtor = null;\n  this.rowAsArray = rowMode === 'array';\n  if (this.rowAsArray) {\n    this.parseRow = this._parseRowAsArray;\n  }\n};\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/;\n\n// adds a command complete message\nResult.prototype.addCommandComplete = function (msg) {\n  var match;\n  if (msg.text) {\n    // pure javascript\n    match = matchRegexp.exec(msg.text);\n  } else {\n    // native bindings\n    match = matchRegexp.exec(msg.command);\n  }\n  if (match) {\n    this.command = match[1];\n    if (match[3]) {\n      // COMMMAND OID ROWS\n      this.oid = parseInt(match[2], 10);\n      this.rowCount = parseInt(match[3], 10);\n    } else if (match[2]) {\n      // COMMAND ROWS\n      this.rowCount = parseInt(match[2], 10);\n    }\n  }\n};\nResult.prototype._parseRowAsArray = function (rowData) {\n  var row = new Array(rowData.length);\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i];\n    if (rawValue !== null) {\n      row[i] = this._parsers[i](rawValue);\n    } else {\n      row[i] = null;\n    }\n  }\n  return row;\n};\nResult.prototype.parseRow = function (rowData) {\n  var row = {};\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i];\n    var field = this.fields[i].name;\n    if (rawValue !== null) {\n      row[field] = this._parsers[i](rawValue);\n    } else {\n      row[field] = null;\n    }\n  }\n  return row;\n};\nResult.prototype.addRow = function (row) {\n  this.rows.push(row);\n};\nResult.prototype.addFields = function (fieldDescriptions) {\n  // clears field definitions\n  // multiple query statements in 1 action can result in multiple sets\n  // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n  // you need to reset the fields\n  this.fields = fieldDescriptions;\n  if (this.fields.length) {\n    this._parsers = new Array(fieldDescriptions.length);\n  }\n  for (var i = 0; i < fieldDescriptions.length; i++) {\n    var desc = fieldDescriptions[i];\n    if (this._types) {\n      this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || 'text');\n    } else {\n      this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || 'text');\n    }\n  }\n};\nmodule.exports = Result;","map":{"version":3,"names":["types","require","Result","rowMode","command","rowCount","oid","rows","fields","_parsers","undefined","_types","RowCtor","rowAsArray","parseRow","_parseRowAsArray","matchRegexp","prototype","addCommandComplete","msg","match","text","exec","parseInt","rowData","row","Array","length","i","len","rawValue","field","name","addRow","push","addFields","fieldDescriptions","desc","getTypeParser","dataTypeID","format","module","exports"],"sources":["C:/Users/Charles/Desktop/Projects/InstagramParody/instagram-frontend/node_modules/pg/lib/result.js"],"sourcesContent":["'use strict'\n/**\n * Copyright (c) 2010-2017 Brian Carlson (brian.m.carlson@gmail.com)\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * README.md file in the root directory of this source tree.\n */\n\nvar types = require('pg-types')\n\n// result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\nvar Result = function (rowMode, types) {\n  this.command = null\n  this.rowCount = null\n  this.oid = null\n  this.rows = []\n  this.fields = []\n  this._parsers = undefined\n  this._types = types\n  this.RowCtor = null\n  this.rowAsArray = rowMode === 'array'\n  if (this.rowAsArray) {\n    this.parseRow = this._parseRowAsArray\n  }\n}\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/\n\n// adds a command complete message\nResult.prototype.addCommandComplete = function (msg) {\n  var match\n  if (msg.text) {\n    // pure javascript\n    match = matchRegexp.exec(msg.text)\n  } else {\n    // native bindings\n    match = matchRegexp.exec(msg.command)\n  }\n  if (match) {\n    this.command = match[1]\n    if (match[3]) {\n      // COMMMAND OID ROWS\n      this.oid = parseInt(match[2], 10)\n      this.rowCount = parseInt(match[3], 10)\n    } else if (match[2]) {\n      // COMMAND ROWS\n      this.rowCount = parseInt(match[2], 10)\n    }\n  }\n}\n\nResult.prototype._parseRowAsArray = function (rowData) {\n  var row = new Array(rowData.length)\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i]\n    if (rawValue !== null) {\n      row[i] = this._parsers[i](rawValue)\n    } else {\n      row[i] = null\n    }\n  }\n  return row\n}\n\nResult.prototype.parseRow = function (rowData) {\n  var row = {}\n  for (var i = 0, len = rowData.length; i < len; i++) {\n    var rawValue = rowData[i]\n    var field = this.fields[i].name\n    if (rawValue !== null) {\n      row[field] = this._parsers[i](rawValue)\n    } else {\n      row[field] = null\n    }\n  }\n  return row\n}\n\nResult.prototype.addRow = function (row) {\n  this.rows.push(row)\n}\n\nResult.prototype.addFields = function (fieldDescriptions) {\n  // clears field definitions\n  // multiple query statements in 1 action can result in multiple sets\n  // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n  // you need to reset the fields\n  this.fields = fieldDescriptions\n  if (this.fields.length) {\n    this._parsers = new Array(fieldDescriptions.length)\n  }\n  for (var i = 0; i < fieldDescriptions.length; i++) {\n    var desc = fieldDescriptions[i]\n    if (this._types) {\n      this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n    } else {\n      this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n    }\n  }\n}\n\nmodule.exports = Result\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}